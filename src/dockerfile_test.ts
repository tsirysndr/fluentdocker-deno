import { assertEquals } from "https://deno.land/std@0.191.0/testing/asserts.ts";
import Dockerfile from "./index.ts";
import Step from "./step.ts";

Deno.test(function dockerfileTest() {
  const dockerfile = new Dockerfile()
    .from("node:18-alpine")
    .maintainer("Tsiry Sandratraina")
    .label("version", "1.0.0")
    .arg("NODE_ENV", "production")
    .comment("This is a comment")
    .run("apk add --no-cache git zsh curl")
    .add("./src", "/app/src")
    .copy("./src", "/app/src")
    .env("NODE_ENV", "production")
    .workdir("/app")
    .onBuild("RUN npm install")
    .stopSignal("SIGINT")
    .shell(["/bin/zsh", "-c"])
    .healthcheck("CMD curl --fail http://localhost:8080 || exit 1")
    .user("node")
    .expose(8080)
    .cmd("npm start");

  assertEquals(
    dockerfile.toString(),
    `# Do not edit this file directly. It is generated by FluentDocker.

FROM node:18-alpine
MAINTAINER Tsiry Sandratraina
LABEL version="1.0.0"
ARG NODE_ENV=production
# This is a comment
RUN apk add --no-cache git zsh curl
ADD ./src /app/src
COPY ./src /app/src
ENV NODE_ENV=production
WORKDIR /app
ONBUILD RUN npm install
STOPSIGNAL SIGINT
SHELL ["/bin/zsh", "-c"]
HEALTHCHECK CMD curl --fail http://localhost:8080 || exit 1
USER node
EXPOSE 8080
CMD npm start`
  );
});

Deno.test(function dockerfileWithStepTest() {
  const dockerfile = new Dockerfile()
    .from("node:18-alpine")
    .withStep(new Step("demo", "Example step").run("echo hello world"))
    .withStep(new Step("demo2", "Example step 2").run("echo hello world 2"));

  assertEquals(
    dockerfile.toString(),
    `# Do not edit this file directly. It is generated by FluentDocker.

FROM node:18-alpine

# demo
# Example step
RUN echo hello world

# demo2
# Example step 2
RUN echo hello world 2`
  );
});
